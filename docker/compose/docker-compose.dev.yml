version: '3.8'

services:
  # Backend development container
  backend:
    build:
      context: .
      dockerfile: docker/dev-backend.Dockerfile
    container_name: bci-backend-dev
    volumes:
      - ./src:/workspace/src:cached
      - ./tests:/workspace/tests:cached
      - ./examples:/workspace/examples:cached
      - ./docs:/workspace/docs:cached
      - ./requirements*.txt:/workspace/
      - backend-cache:/home/developer/.cache
      - jupyter-data:/home/developer/.jupyter
    ports:
      - "8888:8888"  # Jupyter Lab
      - "8000:8000"  # FastAPI/Django
      - "5000:5000"  # Flask
    environment:
      - PYTHONPATH=/workspace/src
      - JUPYTER_ENABLE_LAB=yes
      - DATABASE_URL=postgresql://devuser:devpass@postgres:5432/bci_compression
      - REDIS_URL=redis://redis:6379/0
      - MONGODB_URL=mongodb://devuser:devpass@mongodb:27017/bci_compression
    networks:
      - dev-network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend development container
  frontend:
    build:
      context: .
      dockerfile: docker/dev-frontend.Dockerfile
    container_name: bci-frontend-dev
    volumes:
      - ./dashboard:/workspace:cached
      - frontend-node-modules:/workspace/node_modules
      - frontend-cache:/home/developer/.cache
    ports:
      - "3000:3000"  # React/Vite dev server
      - "4173:4173"  # Vite preview
      - "8080:8080"  # Webpack dev server
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - FAST_REFRESH=true
      - VITE_API_URL=http://localhost:8000
    networks:
      - dev-network
    command: ["npm", "run", "dev", "--", "--host", "0.0.0.0"]

  # PostgreSQL database
  postgres:
    image: postgres:15
    container_name: bci-postgres-dev
    environment:
      - POSTGRES_DB=bci_compression
      - POSTGRES_USER=devuser
      - POSTGRES_PASSWORD=devpass
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - dev-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devuser -d bci_compression"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: bci-redis-dev
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - dev-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB for document storage
  mongodb:
    image: mongo:7
    container_name: bci-mongodb-dev
    environment:
      - MONGO_INITDB_ROOT_USERNAME=devuser
      - MONGO_INITDB_ROOT_PASSWORD=devpass
      - MONGO_INITDB_DATABASE=bci_compression
    volumes:
      - mongodb-data:/data/db
    ports:
      - "27017:27017"
    networks:
      - dev-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO for S3-compatible object storage
  minio:
    image: minio/minio:latest
    container_name: bci-minio-dev
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=devuser
      - MINIO_ROOT_PASSWORD=devpass123
    volumes:
      - minio-data:/data
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    networks:
      - dev-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

networks:
  dev-network:
    driver: bridge

volumes:
  # Application data
  backend-cache:
  frontend-node-modules:
  frontend-cache:
  jupyter-data:

  # Database volumes
  postgres-data:
  redis-data:
  mongodb-data:
  minio-data:
