{
    "name": "BCI Compression Development",
    "dockerComposeFile": ["../docker-compose.dev.yml"],
    "service": "backend",
    "workspaceFolder": "/workspace",
    "shutdownAction": "stopCompose",

    // Set environment variables
    "remoteEnv": {
        "PYTHONPATH": "/workspace/src",
        "JUPYTER_ENABLE_LAB": "yes"
    },

    // Configure VS Code settings
    "customizations": {
        "vscode": {
            "settings": {
                "python.defaultInterpreterPath": "/usr/local/bin/python",
                "python.linting.enabled": true,
                "python.linting.pylintEnabled": true,
                "python.linting.flake8Enabled": true,
                "python.formatting.provider": "black",
                "python.testing.pytestEnabled": true,
                "python.testing.unittestEnabled": false,
                "python.testing.pytestArgs": ["tests/"],
                "editor.formatOnSave": true,
                "editor.codeActionsOnSave": {
                    "source.organizeImports": "explicit"
                },
                "jupyter.notebookFileRoot": "/workspace",
                "files.exclude": {
                    "**/__pycache__": true,
                    "**/.pytest_cache": true,
                    "**/node_modules": true
                }
            },

            // Install essential extensions
            "extensions": [
                // Python development
                "ms-python.python",
                "ms-python.black-formatter",
                "ms-python.flake8",
                "ms-python.pylint",
                "ms-python.mypy-type-checker",

                // Jupyter notebooks
                "ms-toolsai.jupyter",
                "ms-toolsai.jupyter-keymap",
                "ms-toolsai.jupyter-renderers",

                // Code quality
                "ms-vscode.test-adapter-converter",
                "hbenl.vscode-test-explorer",
                "littlefoxteam.vscode-python-test-adapter",

                // Git and version control
                "eamodio.gitlens",
                "mhutchie.git-graph",

                // Docker support
                "ms-azuretools.vscode-docker",
                "ms-vscode-remote.remote-containers",

                // Documentation
                "ms-python.docstring-python",
                "njpwerner.autodocstring",

                // Data science
                "ms-toolsai.vscode-ai",
                "mechatroner.rainbow-csv",

                // Utilities
                "ms-vscode.vscode-json",
                "redhat.vscode-yaml",
                "ms-vscode.makefile-tools",
                "ms-vscode.hexeditor"
            ]
        }
    },

    // Forward ports for development
    "forwardPorts": [
        8888,  // Jupyter Lab
        8000,  // Backend API
        5000,  // Flask
        3000,  // Frontend
        5432,  // PostgreSQL
        6379,  // Redis
        9200,  // Elasticsearch
        9090,  // Prometheus
        3001   // Grafana
    ],

    // Port attributes
    "portsAttributes": {
        "8888": {
            "label": "Jupyter Lab",
            "onAutoForward": "openBrowser"
        },
        "8000": {
            "label": "Backend API",
            "onAutoForward": "notify"
        },
        "3000": {
            "label": "Frontend Dev Server",
            "onAutoForward": "openBrowser"
        },
        "5432": {
            "label": "PostgreSQL",
            "onAutoForward": "ignore"
        },
        "3001": {
            "label": "Grafana",
            "onAutoForward": "notify"
        }
    },

    // Post-create setup commands
    "postCreateCommand": "pip install -e . && pre-commit install",

    // Development features
    "features": {
        "ghcr.io/devcontainers/features/git:1": {},
        "ghcr.io/devcontainers/features/github-cli:1": {},
        "ghcr.io/devcontainers/features/docker-in-docker:2": {},
        "ghcr.io/devcontainers/features/kubectl-helm-minikube:1": {}
    },

    // Mount additional volumes
    "mounts": [
        "source=${localEnv:HOME}/.ssh,target=/home/devuser/.ssh,type=bind,consistency=cached",
        "source=${localEnv:HOME}/.gitconfig,target=/home/devuser/.gitconfig,type=bind,consistency=cached"
    ],

    // User settings
    "remoteUser": "devuser",
    "containerUser": "devuser"
}
