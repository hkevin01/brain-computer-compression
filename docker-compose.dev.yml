version: '3.8'

services:
  # Main backend development environment
  backend:
    build:
      context: ..
      dockerfile: docker/dev-backend.Dockerfile
    container_name: bci-backend-dev
    volumes:
      - ../src:/workspace/src:cached
      - ../tests:/workspace/tests:cached
      - ../examples:/workspace/examples:cached
      - ../docs:/workspace/docs:cached
      - ../requirements*.txt:/workspace/
      - backend-cache:/home/devuser/.cache
      - jupyter-data:/home/devuser/.jupyter
    ports:
      - "8888:8888"  # Jupyter Lab
      - "8000:8000"  # FastAPI/Django
      - "5000:5000"  # Flask
    environment:
      - PYTHONPATH=/workspace/src
      - JUPYTER_ENABLE_LAB=yes
    networks:
      - dev-network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend development environment
  frontend:
    build:
      context: ..
      dockerfile: docker/dev-frontend.Dockerfile
    container_name: bci-frontend-dev
    volumes:
      - ../dashboard:/workspace:cached
      - frontend-node-modules:/workspace/node_modules
      - frontend-cache:/home/devuser/.cache
    ports:
      - "3000:3000"  # React/Vite dev server
      - "4173:4173"  # Vite preview
      - "8080:8080"  # Webpack dev server
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - FAST_REFRESH=true
    networks:
      - dev-network
    command: ["npm", "run", "dev", "--", "--host", "0.0.0.0"]

  # Development tools and utilities
  tools:
    build:
      context: ..
      dockerfile: docker/dev-tools.Dockerfile
    container_name: bci-tools-dev
    volumes:
      - ..:/workspace:cached
      - tools-cache:/home/devuser/.cache
      - tools-go:/home/devuser/go
    networks:
      - dev-network
    command: ["tail", "-f", "/dev/null"]

  # PostgreSQL database
  postgres:
    image: postgres:15
    container_name: bci-postgres-dev
    environment:
      - POSTGRES_DB=bci_compression
      - POSTGRES_USER=devuser
      - POSTGRES_PASSWORD=devpass
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    networks:
      - dev-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devuser -d bci_compression"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: bci-redis-dev
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - dev-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB for document storage
  mongodb:
    image: mongo:7
    container_name: bci-mongodb-dev
    environment:
      - MONGO_INITDB_ROOT_USERNAME=devuser
      - MONGO_INITDB_ROOT_PASSWORD=devpass
      - MONGO_INITDB_DATABASE=bci_compression
    volumes:
      - mongodb-data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d:ro
    ports:
      - "27017:27017"
    networks:
      - dev-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO for S3-compatible object storage
  minio:
    image: minio/minio:latest
    container_name: bci-minio-dev
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=devuser
      - MINIO_ROOT_PASSWORD=devpass123
    volumes:
      - minio-data:/data
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    networks:
      - dev-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # NGINX reverse proxy
  nginx:
    image: nginx:alpine
    container_name: bci-nginx-dev
    volumes:
      - ./nginx.dev.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - dev-network
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch for search capabilities
  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: bci-elasticsearch-dev
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - dev-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: bci-prometheus-dev
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - dev-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: bci-grafana-dev
    environment:
      - GF_SECURITY_ADMIN_USER=devuser
      - GF_SECURITY_ADMIN_PASSWORD=devpass
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana-dashboards:/etc/grafana/provisioning/dashboards:ro
    ports:
      - "3001:3000"
    networks:
      - dev-network
    depends_on:
      - prometheus

volumes:
  # Application data
  backend-cache:
  frontend-node-modules:
  frontend-cache:
  jupyter-data:
  tools-cache:
  tools-go:

  # Database volumes
  postgres-data:
  redis-data:
  mongodb-data:
  minio-data:
  elasticsearch-data:

  # Monitoring volumes
  prometheus-data:
  grafana-data:

networks:
  dev-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
